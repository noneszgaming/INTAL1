@model ProgressSidePanelViewModel

<div
    class="progress-side-panel absolute top-0 left-0 w-[98%] h-full bg-slate-400/30 backdrop-blur-md flex flex-col items-center justify-center px-[12px] py-[12px] z-30 rounded-r-[35px] border-y-2 border-r-2 border-slate-400 gap-5 transition-transform duration-500 -translate-x-full">

    <h1 class="text-4xl text-cstm-purple font-semibold select-none">Tasks</h1>
    <div class="w-[70%] h-[90%] flex flex-col gap-2 overflow-y-auto px-2">
        @await Component.InvokeAsync("TaskListElement", new { title = "Task 1", averageScore = 1.0, })
        @await Component.InvokeAsync("TaskListElement", new { title = "Task 1", averageScore = 1.0, })
        @await Component.InvokeAsync("TaskListElement", new { title = "Task 1", averageScore = 1.0, })
        @await Component.InvokeAsync("TaskListElement", new { title = "Task 1", averageScore = 1.0, })
        @await Component.InvokeAsync("TaskListElement", new { title = "Task 1", averageScore = 1.0, })
        @await Component.InvokeAsync("TaskListElement", new { title = "Task 1", averageScore = 1.0, })
        @await Component.InvokeAsync("TaskListElement", new { title = "Task 1", averageScore = 1.0, })
        @await Component.InvokeAsync("TaskListElement", new { title = "Task 1", averageScore = 1.0, })
        @await Component.InvokeAsync("TaskListElement", new { title = "Task 1", averageScore = 1.0, })
        @await Component.InvokeAsync("TaskListElement", new { title = "Task 1", averageScore = 1.0, })
    </div>

</div>