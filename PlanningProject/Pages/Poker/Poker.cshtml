@page "/Poker"
@model PlanningProject.Pages.Poker.PokerModel

<!DOCTYPE html>
<html>
<head>
    <title>Planning Poker</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>

<body>
    <div class="w-full h-screen flex flex-col flex-grow relative">
        @await Component.InvokeAsync("ProgressSidePanel", new { issues = Model.Issues })
        @await Component.InvokeAsync("PokerHeader", new { isOpened = false })

        <div class="w-full h-[86%] flex items-center justify-center">
            @* card table container *@
            <div class="w-[80%] h-full flex">
                <div class="w-[20%] h-full flex flex-col items-end justify-center">
                    @await Component.InvokeAsync("TableCard")
                </div>
                <div class="w-[60%] h-full flex flex-col items-center justify-evenly">
                    <div class="w-full flex justify-evenly items-end">
                        @await Component.InvokeAsync("TableCard")
                        @await Component.InvokeAsync("TableCard")
                        @await Component.InvokeAsync("TableCard")
                    </div>
                    @await Component.InvokeAsync("Table", new { allVoted = false })
                    <div class="w-full flex justify-evenly items-end">
                        @await Component.InvokeAsync("TableCard")
                        @await Component.InvokeAsync("TableCard")
                        @await Component.InvokeAsync("TableCard")
                    </div>
                </div>
                <div class="w-[20%] h-full flex flex-col items-start justify-center">
                    @await Component.InvokeAsync("TableCard")
                </div>
            </div>

            <div class="w-[20%] h-full flex justify-center items-center">
                @{
                    var firstIssue = Model.Issues.FirstOrDefault();
                    if (firstIssue != null)
                    {
                        @await Component.InvokeAsync("TaskDesc", new
                            {
                                taskName = firstIssue.Key,
                                description = firstIssue.Fields.Description
                            })
                    }
                    else
                    {
                        @await Component.InvokeAsync("TaskDesc", new
                            {
                                taskName = "No Task Available",
                                description = "No tasks found in this sprint."
                            })
                    }
                }
            </div>
        </div>

        @await Component.InvokeAsync("CardDeck")
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/pokerHub")
            .withAutomaticReconnect()
            .build();

        connection.on("UserJoined", (connectionId) => {
            console.log(`User ${connectionId} joined the session`);
            // Find an empty TableCard slot and update it
            const emptySlot = document.querySelector('.table-card-empty');
            if (emptySlot) {
                emptySlot.innerHTML = `
                        <div class="user-card" data-connection-id="${connectionId}">
                            <i class="fa-solid fa-user"></i>
                            <span>User ${connectionId.substring(0, 4)}</span>
                        </div>`;
                emptySlot.classList.remove('table-card-empty');
            }
        });

        connection.on("UserLeft", (connectionId) => {
            console.log(`User ${connectionId} left the session`);
            // Remove the user's card
            const userCard = document.querySelector(`[data-connection-id="${connectionId}"]`);
            if (userCard) {
                userCard.parentElement.classList.add('table-card-empty');
                userCard.remove();
            }
        });


        connection.start().then(() => {
            const urlParams = new URLSearchParams(window.location.search);
            const sprintId = urlParams.get('SprintId');

            if (sprintId) {
                connection.invoke("JoinPokerSession", parseInt(sprintId))
                    .then(() => {
                        console.log(`Successfully joined Sprint_${sprintId}`);
                    })
                    .catch(err => console.error(err));
            }
        }).catch(err => console.error(err));

        // Handle page unload
        window.addEventListener('beforeunload', () => {
            const urlParams = new URLSearchParams(window.location.search);
            const sprintId = urlParams.get('SprintId');

            if (sprintId) {
                connection.invoke("LeavePokerSession", parseInt(sprintId));
            }
        });

    </script>
</body>
</html>
